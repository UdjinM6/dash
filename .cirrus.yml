### Global defaults

env:
  PACKAGE_MANAGER_INSTALL: "apt-get update && apt-get install -y"
  MAKEJOBS: "-j10"
  DANGER_RUN_CI_ON_HOST: "1"  # Containers will be discarded after the run, so there is no risk that the ci scripts modify the system
  TEST_RUNNER_PORT_MIN: "14000"  # Must be larger than 12321, which is used for the http cache. See https://cirrus-ci.org/guide/writing-tasks/#http-cache
  CI_FAILFAST_TEST_LEAVE_DANGLING: "1"  # Cirrus CI does not care about dangling process and setting this variable avoids killing the CI script itself on error
  CCACHE_SIZE: "200M"
  CCACHE_DIR: "/tmp/ccache_dir"

# https://cirrus-ci.org/guide/tips-and-tricks/#sharing-configuration-between-tasks
filter_template: &FILTER_TEMPLATE
  skip: $CIRRUS_REPO_FULL_NAME == "bitcoin-core/gui" && $CIRRUS_PR == ""  # No need to run on the read-only mirror, unless it is a PR. https://cirrus-ci.org/guide/writing-tasks/#conditional-task-execution
  stateful: false  # https://cirrus-ci.org/guide/writing-tasks/#stateful-tasks

base_template: &BASE_TEMPLATE
  << : *FILTER_TEMPLATE
  merge_base_script:
    # Unconditionally install git (used in fingerprint_script) and set the
    # default git author name (used in verify-commits.py)
    - bash -c "$PACKAGE_MANAGER_INSTALL git"
    - git config --global user.email "ci@ci.ci"
    - git config --global user.name "ci"
    - if [ "$CIRRUS_PR" = "" ]; then exit 0; fi
    - git fetch $CIRRUS_REPO_CLONE_URL "pull/${CIRRUS_PR}/merge"
    - git checkout FETCH_HEAD  # Use merged changes to detect silent merge conflicts
                               # Also, the merge commit is used to lint COMMIT_RANGE="HEAD~..HEAD"

global_task_template: &GLOBAL_TASK_TEMPLATE
  << : *BASE_TEMPLATE
  timeout_in: 120m  # https://cirrus-ci.org/faq/#instance-timed-out
  container:
    # https://cirrus-ci.org/faq/#are-there-any-limits
    # Each project has 16 CPU in total, assign 2 to each container, so that 8 tasks run in parallel
    cpu: 2
    greedy: true
    memory: 8G  # Set to 8GB to avoid OOM. https://cirrus-ci.org/guide/linux/#linux-containers
  ccache_cache:
    folder: "/tmp/ccache_dir"
  depends_built_cache:
    folder: "/tmp/cirrus-ci-build/depends/built"
  depends_sdk_cache:
    folder: "/tmp/cirrus-ci-build/depends/sdk-sources"
  depends_releases_cache:
    folder: "/tmp/cirrus-ci-build/releases"
  ci_script:
    - ./ci/test_run_all.sh

compute_credits_template: &CREDITS_TEMPLATE
  # https://cirrus-ci.org/pricing/#compute-credits
  # Only use credits for pull requests to the main repo
  use_compute_credits: $CIRRUS_REPO_FULL_NAME == 'dashpay/dash' && $CIRRUS_PR != ""

task:
  name: 'lint [bookworm]'
  << : *BASE_TEMPLATE
  container:
    image: debian:bookworm
    cpu: 1
    memory: 1G
  # For faster CI feedback, immediately schedule the linters
  << : *CREDITS_TEMPLATE
  python_cache:
    folder: "/tmp/python"
    fingerprint_script: cat .python-version /etc/os-release
  lint_script:
    - ./ci/lint_run_all.sh
task:
  name: 'ARM [unit tests, no functional tests] [bullseye]'
  << : *GLOBAL_TASK_TEMPLATE
  arm_container:
    image: debian:bullseye
    cpu: 2
    memory: 8G
  env:
    FILE_ENV: "./ci/test/00_setup_env_arm.sh"
    QEMU_USER_CMD: ""  # Disable qemu and run the test natively

task:
  name: 'Win64 [unit tests, no gui tests, no boost::process, no functional tests] [jammy]'
  << : *GLOBAL_TASK_TEMPLATE
  container:
    image: ubuntu:jammy
  env:
    FILE_ENV: "./ci/test/00_setup_env_win64.sh"

task:
  name: '32-bit + dash [gui] [CentOS 9]'
  << : *GLOBAL_TASK_TEMPLATE
  container:
    image: centos:9
  env:
    PACKAGE_MANAGER_INSTALL: "yum install -y"
    FILE_ENV: "./ci/test/00_setup_env_i686_centos.sh"

task:
  name: '[previous releases, uses qt5 dev package and some depends packages, DEBUG] [unsigned char] [jammy]'
  # For faster CI feedback, immediately schedule a task that compiles most modules
  << : *CREDITS_TEMPLATE
  << : *GLOBAL_TASK_TEMPLATE
  container:
    image: ubuntu:jammy
  env:
    FILE_ENV: "./ci/test/00_setup_env_native_qt5.sh"

task:
  name: '[TSan, depends, gui] [lunar]'
  << : *GLOBAL_TASK_TEMPLATE
  container:
    image: ubuntu:lunar
    cpu: 6  # Increase CPU and Memory to avoid timeout
    memory: 24G
  env:
    FILE_ENV: "./ci/test/00_setup_env_native_tsan.sh"

task:
  name: '[MSan, depends] [jammy]'
  << : *GLOBAL_TASK_TEMPLATE
  container:
    image: ubuntu:jammy
  env:
    FILE_ENV: "./ci/test/00_setup_env_native_msan.sh"
    MAKEJOBS: "-j4"  # Avoid excessive memory use due to MSan

task:
  name: '[ASan + LSan + UBSan + integer, no depends] [jammy]'
  << : *GLOBAL_TASK_TEMPLATE
  container:
    image: ubuntu:jammy
  env:
    FILE_ENV: "./ci/test/00_setup_env_native_asan.sh"
    MAKEJOBS: "-j4"  # Avoid excessive memory use

task:
  name: '[fuzzer,address,undefined,integer, no depends] [jammy]'
  << : *GLOBAL_TASK_TEMPLATE
  container:
    image: ubuntu:jammy
    cpu: 4  # Increase CPU and memory to avoid timeout
    memory: 16G
  env:
    FILE_ENV: "./ci/test/00_setup_env_native_fuzz.sh"

task:
  name: '[multiprocess, DEBUG] [jammy]'
  << : *GLOBAL_TASK_TEMPLATE
  container:
    image: ubuntu:jammy
    cpu: 4
    memory: 16G  # The default memory is sometimes just a bit too small, so double everything
  env:
    FILE_ENV: "./ci/test/00_setup_env_native_multiprocess.sh"

task:
  name: '[no wallet] [jammy]'
  << : *GLOBAL_TASK_TEMPLATE
  container:
    image: ubuntu:jammy
  env:
    FILE_ENV: "./ci/test/00_setup_env_native_nowallet.sh"

task:
  name: 'macOS 11.0 [gui, no tests] [jammy]'
  << : *GLOBAL_TASK_TEMPLATE
  container:
    image: ubuntu:jammy
  env:
    FILE_ENV: "./ci/test/00_setup_env_mac.sh"

task:
  name: 'macOS 12 native [gui, system sqlite only] [no depends]'
  brew_install_script:
    - brew install boost libevent qt@5 miniupnpc ccache zeromq qrencode libtool automake gnu-getopt
  << : *GLOBAL_TASK_TEMPLATE
  macos_instance:
    # Use latest image, but hardcode version to avoid silent upgrades (and breaks)
    image: monterey-xcode-13.2  # https://cirrus-ci.org/guide/macOS
  env:
    DANGER_RUN_CI_ON_HOST: "true"
    CI_USE_APT_INSTALL: "no"
    PACKAGE_MANAGER_INSTALL: "echo"  # Nothing to do
    FILE_ENV: "./ci/test/00_setup_env_mac_host.sh"
