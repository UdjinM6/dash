### Global defaults

env:
  PACKAGE_MANAGER_INSTALL: "apt-get update && apt-get install -y"
  MAKEJOBS: "-j4"
  DANGER_RUN_CI_ON_HOST: "1"  # Containers will be discarded after the run, so there is no risk that the ci scripts modify the system
  TEST_RUNNER_PORT_MIN: "14000"  # Must be larger than 12321, which is used for the http cache. See https://cirrus-ci.org/guide/writing-tasks/#http-cache
  CI_FAILFAST_TEST_LEAVE_DANGLING: "1"  # Cirrus CI does not care about dangling process and setting this variable avoids killing the CI script itself on error
  CCACHE_SIZE: "200M"
  CCACHE_DIR: "/tmp/ccache_dir"

# https://cirrus-ci.org/guide/tips-and-tricks/#sharing-configuration-between-tasks
filter_template: &FILTER_TEMPLATE
  skip: $CIRRUS_REPO_FULL_NAME == "bitcoin-core/gui" && $CIRRUS_PR == ""  # No need to run on the read-only mirror, unless it is a PR. https://cirrus-ci.org/guide/writing-tasks/#conditional-task-execution
  stateful: false  # https://cirrus-ci.org/guide/writing-tasks/#stateful-tasks

base_template: &BASE_TEMPLATE
  << : *FILTER_TEMPLATE
  merge_base_script:
    # Unconditionally install git (used in fingerprint_script) and set the
    # default git author name (used in verify-commits.py)
    - bash -c "$PACKAGE_MANAGER_INSTALL git"
    - git config --global user.email "ci@ci.ci"
    - git config --global user.name "ci"
    - if [ "$CIRRUS_PR" = "" ]; then exit 0; fi
    - git fetch $CIRRUS_REPO_CLONE_URL $CIRRUS_BASE_BRANCH
    - git merge FETCH_HEAD  # Merge base to detect silent merge conflicts

global_task_template: &GLOBAL_TASK_TEMPLATE
  << : *BASE_TEMPLATE
  timeout_in: 120m  # https://cirrus-ci.org/faq/#instance-timed-out
  container:
    # https://cirrus-ci.org/faq/#are-there-any-limits
    # Each project has 16 CPU in total, assign 2 to each container, so that 8 tasks run in parallel
    cpu: 2
    memory: 8G  # Set to 8GB to avoid OOM. https://cirrus-ci.org/guide/linux/#linux-containers
  ccache_cache:
    folder: "/tmp/ccache_dir"
  depends_built_cache:
    folder: "/tmp/cirrus-ci-build/depends/built"
  depends_sdk_cache:
    folder: "/tmp/cirrus-ci-build/depends/sdk-sources"
  depends_releases_cache:
    folder: "/tmp/cirrus-ci-build/releases"
  ci_script:
    - ./ci/test_run_all.sh

compute_credits_template: &CREDITS_TEMPLATE
  # https://cirrus-ci.org/pricing/#compute-credits
  # Only use credits for pull requests to the main repo
  use_compute_credits: $CIRRUS_REPO_FULL_NAME == 'dashpay/dash' && $CIRRUS_PR != ""

task:
  name: 'lint [bookworm]'
  << : *BASE_TEMPLATE
  container:
    image: debian:bookworm
    cpu: 1
    memory: 1G
  # For faster CI feedback, immediately schedule the linters
  << : *CREDITS_TEMPLATE
  python_cache:
    folder: "/tmp/python"
    fingerprint_script: cat .python-version /etc/os-release
  lint_script:
    - ./ci/lint_run_all.sh

task:
  name: "Win64 native [unit tests, no functional tests] [msvc]"
  << : *FILTER_TEMPLATE
  windows_container:
    cpu: 4
    memory: 16G
    image: cirrusci/windowsservercore:visualstudio2019
  timeout_in: 120m
  env:
    CIRRUS_SHELL: powershell
    PATH: 'C:\Python39;C:\Python39\Scripts;C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\MSBuild\Current\Bin;%PATH%'
    PYTHONUTF8: 1
    VCPKG_TAG: '75522bb1f2e7d863078bcd06322348f053a9e33f'
    VCPKG_FEATURE_FLAGS: 'manifests'
    QT_DOWNLOAD_URL: 'https://github.com/sipsorcery/qt_win_binary/releases/download/qt51211x64_static_vs2019_160900/Qt5.12.11_x64_static_vs2019_160900.zip'
    QT_DOWNLOAD_HASH: 'b24436bbc49ac69d992efc148e640f02e8dec426bed5f8497abf735e7d7d59d0'
    QT_LOCAL_PATH: 'C:\Qt5.12.11_x64_static_vs2019_160900'
    IgnoreWarnIntDirInTempDetected: 'true'
  merge_script:
    - git config --global user.email "ci@ci.ci"
    - git config --global user.name "ci"
    - git config core.filemode false
    - git reset --hard
    - if ($env:CIRRUS_PR -eq $null) { exit 0; }
    - git fetch $env:CIRRUS_REPO_CLONE_URL $env:CIRRUS_BASE_BRANCH
    - git merge FETCH_HEAD
  vcpkg_cache:
    folder: 'C:\Users\ContainerAdministrator\AppData\Local\vcpkg\archives'
  install_python_script:
    - choco install --yes --no-progress python3 --version=3.9.6
    - Write-Host ""
    - python -VV
  install_vcpkg_script:
    - cd ..
    - git clone --quiet https://github.com/microsoft/vcpkg.git
    - cd vcpkg
    - git -c advice.detachedHead=false checkout $env:VCPKG_TAG
    - .\bootstrap-vcpkg -disableMetrics
    - Add-Content "triplets\x64-windows-static.cmake" "set(VCPKG_BUILD_TYPE release)"
    - .\vcpkg integrate install
    - Write-Host ""
    - .\vcpkg version
  download_qt_binaries_script: |
      Invoke-WebRequest -Uri $env:QT_DOWNLOAD_URL -Out qtdownload.zip;
      Write-Host "Qt binaries successfully downloaded, checking hash against $env:QT_DOWNLOAD_HASH...";
      if ((Get-FileHash qtdownload.zip).Hash -eq $env:QT_DOWNLOAD_HASH) {
        Write-Host "Downloaded Qt binaries archive matched the expected hash.";
        Expand-Archive qtdownload.zip -DestinationPath $env:QT_LOCAL_PATH;
      }
      else {
        Write-Host "ERROR: Downloaded Qt binaries archive did not match the expected hash.";
        exit 1;
      }
  build_environment_script:
    - choco list --localonly
    - Write-Host ""
    - msbuild -version
  build_script:
    - cd $env:CIRRUS_WORKING_DIR
    - python build_msvc\msvc-autogen.py
    - msbuild build_msvc\bitcoin.sln -property:Configuration=Release -maxCpuCount -verbosity:minimal -noLogo
  unit_tests_script:
    - src\test_bitcoin.exe
    - src\bench_bitcoin.exe > $null
    - python test\util\test_runner.py
    - python test\util\rpcauth-test.py

task:
  name: 'ARM [unit tests, no functional tests] [buster]'
  << : *GLOBAL_TASK_TEMPLATE
  arm_container:
    image: debian:buster
    cpu: 2
    memory: 8G
  env:
    FILE_ENV: "./ci/test/00_setup_env_arm.sh"
    QEMU_USER_CMD: ""  # Disable qemu and run the test natively

task:
  name: 'Win64 [unit tests, no gui tests, no boost::process, no functional tests] [jammy]'
  << : *GLOBAL_TASK_TEMPLATE
  container:
    image: ubuntu:jammy
  env:
    FILE_ENV: "./ci/test/00_setup_env_win64.sh"

task:
  name: '32-bit + dash [gui] [CentOS 9]'
  << : *GLOBAL_TASK_TEMPLATE
  container:
    image: centos:9
  env:
    PACKAGE_MANAGER_INSTALL: "yum install -y"
    FILE_ENV: "./ci/test/00_setup_env_i686_centos.sh"

task:
  name: '[previous releases, uses qt5 dev package and some depends packages, DEBUG] [unsigned char] [jammy]'
  # For faster CI feedback, immediately schedule a task that compiles most modules
  << : *CREDITS_TEMPLATE
  << : *GLOBAL_TASK_TEMPLATE
  container:
    image: ubuntu:jammy
  env:
    FILE_ENV: "./ci/test/00_setup_env_native_qt5.sh"

task:
  name: '[depends, sanitizers: thread (TSan), no gui] [lunar]'
  << : *GLOBAL_TASK_TEMPLATE
  container:
    image: ubuntu:lunar
    cpu: 6  # Increase CPU and Memory to avoid timeout
    memory: 24G
  env:
    MAKEJOBS: "-j8"
    FILE_ENV: "./ci/test/00_setup_env_native_tsan.sh"

task:
  name: '[depends, sanitizers: memory (MSan)] [jammy]'
  << : *GLOBAL_TASK_TEMPLATE
  container:
    image: ubuntu:jammy
  env:
    FILE_ENV: "./ci/test/00_setup_env_native_msan.sh"

task:
  name: '[no depends, sanitizers: address/leak (ASan + LSan) + undefined (UBSan) + integer] [hirsute]'
  << : *GLOBAL_TASK_TEMPLATE
  container:
    image: ubuntu:hirsute
  env:
    FILE_ENV: "./ci/test/00_setup_env_native_asan.sh"

task:
  name: '[no depends, sanitizers: fuzzer,address,undefined,integer] [jammy]'
  << : *GLOBAL_TASK_TEMPLATE
  container:
    image: ubuntu:jammy
    cpu: 4  # Increase CPU and memory to avoid timeout
    memory: 16G
  env:
    MAKEJOBS: "-j8"
    FILE_ENV: "./ci/test/00_setup_env_native_fuzz.sh"

task:
  name: '[multiprocess, DEBUG] [jammy]'
  << : *GLOBAL_TASK_TEMPLATE
  container:
    image: ubuntu:jammy
    cpu: 4
    memory: 16G  # The default memory is sometimes just a bit too small, so double everything
  env:
    MAKEJOBS: "-j8"
    FILE_ENV: "./ci/test/00_setup_env_native_multiprocess.sh"

task:
  name: '[no wallet] [jammy]'
  << : *GLOBAL_TASK_TEMPLATE
  container:
    image: ubuntu:jammy
  env:
    FILE_ENV: "./ci/test/00_setup_env_native_nowallet.sh"

task:
  name: 'macOS 11.0 [gui, no tests] [jammy]'
  << : *GLOBAL_TASK_TEMPLATE
  container:
    image: ubuntu:jammy
  env:
    FILE_ENV: "./ci/test/00_setup_env_mac.sh"

task:
  name: 'macOS 11 native [gui] [no depends]'
  brew_install_script:
    - brew install boost libevent berkeley-db@4 qt@5 miniupnpc ccache zeromq qrencode sqlite libtool automake pkg-config gnu-getopt
  << : *GLOBAL_TASK_TEMPLATE
  macos_instance:
    # Use latest image, but hardcode version to avoid silent upgrades (and breaks)
    image: big-sur-xcode-12.5  # https://cirrus-ci.org/guide/macOS
  env:
    DANGER_RUN_CI_ON_HOST: "true"
    CI_USE_APT_INSTALL: "no"
    PACKAGE_MANAGER_INSTALL: "echo"  # Nothing to do
    FILE_ENV: "./ci/test/00_setup_env_mac_host.sh"
